name: Build Lambda Layers

on:
  push:
    paths:
      - 'backend/requirements1.txt'
      - 'backend/requirements2.txt'
      - 'backend/requirements3.txt'
      - 'backend/requirements4.txt'
  workflow_dispatch:

jobs:
  build-and-publish-layers:
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: python3.12
      S3_BUCKET: hackathon-lambda-ap-ai-cyberark

      # Layer names for requirements files
      LAYER_NAMES: "layer1 layer2 layer3 layer4"

      # Extra layer for sentence-transformers + torch cpu
      ST_LAYER_NAME: sentence-transformers-layer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Build layers for requirements1.txt to requirements4.txt
      - name: Build Layers from requirements files
        run: |
          set -e
          for i in 1 2 3 4; do
            echo "Building layer$i..."
            mkdir -p python
            pip install -r backend/requirements${i}.txt --platform manylinux2014_x86_64 --only-binary=:all: -t python/
            find python/ -type d -name "__pycache__" -exec rm -rf {} +
            find python/ -type d -name "tests" -exec rm -rf {} +
            find python/ -type f -name "*.pyc" -delete
            zip -r layer${i}.zip python
            rm -rf python
          done

      # Build the sentence-transformers + torch CPU layer
      - name: Build sentence-transformers layer
        run: |
          mkdir -p python
          pip install torch --index-url https://download.pytorch.org/whl/cpu --target python/
          pip install sentence-transformers --target python/
          find python/ -type d -name "__pycache__" -exec rm -rf {} +
          find python/ -type d -name "tests" -exec rm -rf {} +
          find python/ -type d \( -name "*.dist-info" -o -name "*.egg-info" \) -exec rm -rf {} +
          find python/ -type f -name "*.pyc" -delete
          zip -r sentence-transformers-layer.zip python
          rm -rf python

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: AKIAT5VEV4FHFQQJBZVX
          aws-secret-access-key: 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
          aws-region: us-east-1

      # Upload all zipped layers to S3
      - name: Upload all layers to S3
        run: |
          aws s3 cp layer1.zip s3://${S3_BUCKET}/layers/layer1.zip
          aws s3 cp layer2.zip s3://${S3_BUCKET}/layers/layer2.zip
          aws s3 cp layer3.zip s3://${S3_BUCKET}/layers/layer3.zip
          aws s3 cp layer4.zip s3://${S3_BUCKET}/layers/layer4.zip
          aws s3 cp sentence-transformers-layer.zip s3://${S3_BUCKET}/layers/sentence-transformers-layer.zip

      # Publish all layers
      - name: Publish all layers
        run: |
          aws lambda publish-layer-version --layer-name layer1 \
            --description "Dependencies from requirements1.txt" \
            --content S3Bucket=${S3_BUCKET},S3Key=layers/layer1.zip \
            --compatible-runtimes ${PYTHON_VERSION}

          aws lambda publish-layer-version --layer-name layer2 \
            --description "Dependencies from requirements2.txt" \
            --content S3Bucket=${S3_BUCKET},S3Key=layers/layer2.zip \
            --compatible-runtimes ${PYTHON_VERSION}

          aws lambda publish-layer-version --layer-name layer3 \
            --description "Dependencies from requirements3.txt" \
            --content S3Bucket=${S3_BUCKET},S3Key=layers/layer3.zip \
            --compatible-runtimes ${PYTHON_VERSION}

          aws lambda publish-layer-version --layer-name layer4 \
            --description "Dependencies from requirements4.txt" \
            --content S3Bucket=${S3_BUCKET},S3Key=layers/layer4.zip \
            --compatible-runtimes ${PYTHON_VERSION}

          aws lambda publish-layer-version --layer-name ${ST_LAYER_NAME} \
            --description "Sentence-transformers with CPU PyTorch" \
            --content S3Bucket=${S3_BUCKET},S3Key=layers/sentence-transformers-layer.zip \
            --compatible-runtimes ${PYTHON_VERSION}

      # Get the latest version ARNs for all layers
      - name: Get latest layer ARNs
        id: get-layer-arns
        run: |
          echo "Fetching latest layer version ARNs..."
          LAYER1_ARN=$(aws lambda list-layer-versions --layer-name layer1 --query 'LayerVersions[0].LayerVersionArn' --output text)
          LAYER2_ARN=$(aws lambda list-layer-versions --layer-name layer2 --query 'LayerVersions[0].LayerVersionArn' --output text)
          LAYER3_ARN=$(aws lambda list-layer-versions --layer-name layer3 --query 'LayerVersions[0].LayerVersionArn' --output text)
          LAYER4_ARN=$(aws lambda list-layer-versions --layer-name layer4 --query 'LayerVersions[0].LayerVersionArn' --output text)
          ST_ARN=$(aws lambda list-layer-versions --layer-name ${ST_LAYER_NAME} --query 'LayerVersions[0].LayerVersionArn' --output text)
          echo "layer1_arn=$LAYER1_ARN" >> "$GITHUB_OUTPUT"
          echo "layer2_arn=$LAYER2_ARN" >> "$GITHUB_OUTPUT"
          echo "layer3_arn=$LAYER3_ARN" >> "$GITHUB_OUTPUT"
          echo "layer4_arn=$LAYER4_ARN" >> "$GITHUB_OUTPUT"
          echo "st_arn=$ST_ARN" >> "$GITHUB_OUTPUT"

      # List functions using any of the layers (approximate by layer name substring)
      - name: List functions using layers
        id: list-functions
        run: |
          FUNCTIONS=$(aws lambda list-functions --query "Functions[?Layers && contains(join(',', Layers[].Arn), 'layer1') || contains(join(',', Layers[].Arn), 'layer2') || contains(join(',', Layers[].Arn), 'layer3') || contains(join(',', Layers[].Arn), 'layer4') || contains(join(',', Layers[].Arn), '${ST_LAYER_NAME}')].FunctionName" --output text)
          echo "functions=$FUNCTIONS" >> "$GITHUB_OUTPUT"

      # Update all functions to use all latest layers
      - name: Update functions to use all latest layers
        run: |
          for function in ${{ steps.list-functions.outputs.functions }}; do
            echo "Updating $function to use latest layers..."
            aws lambda update-function-configuration \
              --function-name "$function" \
              --layers ${{ steps.get-layer-arns.outputs.layer1_arn }} ${{ steps.get-layer-arns.outputs.layer2_arn }} ${{ steps.get-layer-arns.outputs.layer3_arn }} ${{ steps.get-layer-arns.outputs.layer4_arn }} ${{ steps.get-layer-arns.outputs.st_arn }}
          done
